// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: server/proto/tasks.proto

/*
Package tasks is a generated protocol buffer package.

It is generated from these files:
	server/proto/tasks.proto

It has these top-level messages:
	Resources
	DeployRequest
	DeployResponse
	UndeployRequest
	UndeployResponse
	ListRequest
	ListResponse
	HostsRequest
	Host
	HostsResponse
*/
package tasks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Tasks service

type TasksClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...client.CallOption) (*DeployResponse, error)
	Undeploy(ctx context.Context, in *UndeployRequest, opts ...client.CallOption) (*UndeployResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Hosts(ctx context.Context, in *HostsRequest, opts ...client.CallOption) (*HostsResponse, error)
}

type tasksClient struct {
	c           client.Client
	serviceName string
}

func NewTasksClient(serviceName string, c client.Client) TasksClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "tasks"
	}
	return &tasksClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *tasksClient) Deploy(ctx context.Context, in *DeployRequest, opts ...client.CallOption) (*DeployResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Tasks.Deploy", in)
	out := new(DeployResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Undeploy(ctx context.Context, in *UndeployRequest, opts ...client.CallOption) (*UndeployResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Tasks.Undeploy", in)
	out := new(UndeployResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Tasks.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Hosts(ctx context.Context, in *HostsRequest, opts ...client.CallOption) (*HostsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Tasks.Hosts", in)
	out := new(HostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tasks service

type TasksHandler interface {
	Deploy(context.Context, *DeployRequest, *DeployResponse) error
	Undeploy(context.Context, *UndeployRequest, *UndeployResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Hosts(context.Context, *HostsRequest, *HostsResponse) error
}

func RegisterTasksHandler(s server.Server, hdlr TasksHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Tasks{hdlr}, opts...))
}

type Tasks struct {
	TasksHandler
}

func (h *Tasks) Deploy(ctx context.Context, in *DeployRequest, out *DeployResponse) error {
	return h.TasksHandler.Deploy(ctx, in, out)
}

func (h *Tasks) Undeploy(ctx context.Context, in *UndeployRequest, out *UndeployResponse) error {
	return h.TasksHandler.Undeploy(ctx, in, out)
}

func (h *Tasks) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.TasksHandler.List(ctx, in, out)
}

func (h *Tasks) Hosts(ctx context.Context, in *HostsRequest, out *HostsResponse) error {
	return h.TasksHandler.Hosts(ctx, in, out)
}
